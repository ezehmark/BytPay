name: Build Android Debug APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: yarn

      # 3Ô∏è‚É£ Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile --force

      # 5Ô∏è‚É£ Ensure Metro config exists
      - name: Ensure metro.config.js
        run: |
          if [ ! -f metro.config.js ]; then
            echo "const { getDefaultConfig } = require('metro-config'); module.exports = (async () => getDefaultConfig())();" > metro.config.js
          fi

      # 6Ô∏è‚É£ Bundle JS for debug
      - name: Bundle JS for debug
        run: |
          mkdir -p android/app/src/main/assets
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res/

      # 7Ô∏è‚É£ Clean Android build
      - name: Clean Android
        run: |
          cd android
          ./gradlew clean

      # 8Ô∏è‚É£ Build Android Debug APK
      - name: Build Android Debug APK
        run: |
          cd android
          ./gradlew assembleDebug --no-daemon --stacktrace

      # 9Ô∏è‚É£ List APKs
      - name: List APKs
        run: ls -R android/app/build/outputs/apk/

      # üîü Inspect APK Contents and save to TXT
      - name: Inspect APK Contents
        run: |
          APK_PATH=$(find android/app/build/outputs/apk/debug/ -name "*.apk" | head -n 1)
          echo "APK Path: $APK_PATH"
          OUTPUT_FILE=apk_contents.txt
          echo "Listing all files inside APK (sorted by size):" > $OUTPUT_FILE
          unzip -l "$APK_PATH" | awk '{print $4, $1}' | sort -k2 -nr >> $OUTPUT_FILE
          echo -e "\nTotal APK size:" >> $OUTPUT_FILE
          du -h "$APK_PATH" >> $OUTPUT_FILE
          cat $OUTPUT_FILE

      # 1Ô∏è‚É£1Ô∏è‚É£ Upload APK artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: android/app/build/outputs/apk/debug/*.apk

      # 1Ô∏è‚É£2Ô∏è‚É£ Upload APK contents TXT
      - name: Upload APK contents TXT
        uses: actions/upload-artifact@v4
        with:
          name: apk-contents-analysis
          path: apk_contents.txt
